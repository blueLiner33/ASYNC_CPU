Installation instructions:

 1) Get gcc version 2.7.X.

 2) Move this "dlx" subdirectory to the "config" subdirectory
    of your gcc source tree.

 3) Edit config/dlx/Makefile and change GCCVER to reflect the 
    version of GCC you are adding it to. Also change PREFIX
    to reflect the subdirectory you want the bin/ and lib/
    subdirectories for gcc-dlx to go in.

 4) Run "make" in the "config/dlx" directory. It should patch
    configure and config.sub, build gcc, cpp, cc1, and then
    build the dlx assembler and linker.

 5) Run "make install" to install it all.

If you want to install the GNU C library compiled for DLX, put it in
the PREFIX directory you set in config/dlx/Makefile.

Special options to the compiler:
 
 * -mtraps will link against libtraps.a instead of libc.a, which
   will reduce the final code size and decrease the number of 
   cycles to be executed by using the simulator traps for 
   printf, sin, cos, sqrt, etc.

Things that could be added or fixed:

 * Splitting lhi/addui pair to fill delay slots.
   The load/store instructions should be generated by 
   a define-expand; this way separate lhi and addui insns
   could be generated.

 * Generating integer mult/div ops instead of using the
   ones that work out of the fp registers.

 * Support functions so long long can be 64 bits.

 * Code generation could still be better.
   - loading and using constants could be combined better. 

 * Code scheduling. (there is no scheduling information, currently)

 * Peephole optimization.

 * Setjmp/longjmp could be made to work.

 * Trampolines for taking the address of nested functions.

 * Very occasionally the delay-slot filler in reorg.c is moving 
   instructions where it shouldn't when using -O2. I don't know
   if is a problem with the machine description or not. (This occurs
   in a file in the spec92fp benchmark "doduc".)

Comments or questions to:  gcc-dlx@mountains.ee.umn.edu

Look for updates on our web site: http://www-mount.ee.umn.edu/mcerg

CHANGE LOG

*** Version 1.0 released 12/14/95
 * Corrected many bugs relating to handling of short and char types.
   lb, lbu, sb, lh, lhu, and sh instructions are now generated when
   doing a load and a sign/zero extension at the same time.
 * Added patterns for "sOP" instructions (set register nonzero
   if comparison is true). This means that "x = y==z" generates
   code that does not branch.
 * Fixed a bug where "i & X" (where 0xffff < X < 0xffffffff) would
   generate bad code (also i | X and i ^ X). 
 * Created va-dlx.h and added a stdarg.h and varargs.h that use it
   so that variable argument lists will work with DLX.
 * Added limits.h and float.h. The float.h file is appropriate for
   sparc and mips host floating point, and perhaps other machines with
   IEEE floating point.
 * Added the convention that r2 is used to pass the static chain
   pointer so that nested functions will work. (this follows the 
   convention used on the MIPS.) You can't take the address of a 
   nested function yet because there is no support for trampolines.
   This allows stdio/printf_fp.c in the GNU C library to compile
   correctly.
 * The linker links against object libraries now, and if you call it
   with the name ranlib (using a link) it will build a table
   of contents for an archive. I.e. "ranlib libfoo.a" will add
   a file called .SYMTAB to libfoo.a that contains a table of 
   the global symbols used and referenced in each object file
   in libfoo.a. 
 * The linker reads .a files directly, and only calls "/bin/ar"
   to change the .SYMTAB file when it is doing ranlib duty.
 * There is now a -mtraps option that makes the compiler link against
   libtraps.a instead of libc.a. This means that the simulator traps
   will be used instead of the libc functions.
*** Version 1.1 released 2/5/96
 * Changed the behavior of "main". Now instead of loading memSize-8
   into the stack pointer, it assumes that the stack pointer is 
   correctly set on entry to main, and that the usual argc and argv
   arguments have been put onto the stack. The flag "-mnoargs"
   restores the previous behavior (loading memSize-8 into r29).
 * Moved the "%{" top the top of lexer.l; hopefully this will avoid
   some of the problems people are having with lex.yy.c.
 * TODO: The linker should parse object files in a library in the
   order in which they appear in the library to avoid unnecessary 
   seeking.
 * Fixed bug: the linker should rename local labels so that two files
   with the same name do not have local label conflicts. The linker
   now ensures that all non-global symbols are uniquely named (by
   adding "LF_NNN" to each name where NNN is the number of the object
   file in which the name occurred.
 * Renamed _barrier to just barrier in crt0.o, and removed some legacy
   trap stubs that the simulator doesn't support and nobody uses anyway.
 * Added "fetch" instruction (looks like a store) to the linker at the
   request of others using the compiler.
*** Version 1.2 released 3/6/96
 * Fixed problem in ASM_FORMAT_PRIVATE_NAME in dlx.h causes problems
   (writes more memory than it allocates).
 * Changed dlx.h so that local labels no longer contain the the .c 
   filename. This was necessary in the past when there was no linker,
   but now it's not needed. Additionally, in some places in gcc
   not much space is allocated for those labels so a long filename
   could cause cc1 to coredump.
*** Version 1.3 released 4/3/96
 * Added four new traps: access, lseek, tell, and isatty. This allows
   things in the c library to work a bit better (stdio can figure out
   to line-buffer terminal devices, for instance).
 * Added CC=$(CC) to the invocations of the Makefile above in the GCC 
   directory.
 * Brian Hughes (bwh8918@rit.edu) pointed out an allocation error in
   sym.c which caused much more memory than neccessary to be used.
*** Version 1.4 released 2/26/97 


In order for programs written in C to be able to be executed on the
DLX processor platform the following tools are required:

- a C compiler for compiling the source program code.
- an assembler for converting the assembly output of the compiler to a
  binary object file.
- a post-processing tool for extracting binary code (in binary or
  ASCII form) from the object file.


===========================================================================
DLX C Compiler
===========================================================================

The compiler currently used is the v2.7.2.3 GCC distribution which
includes a DLX machine description. Thus, with this distribution it is
possible to compile the GCC cross-compiler xgcc for the DLX
architecture (we have done this on Linux). GCC v2.7.2.3 including the
DLX machine description is available at the directory
../gcc-dlx/dlxgcc.

Invoking xgcc compiler with the -S flag produces DLX assembly code for
any C program description.


===========================================================================
DLX Assembler
===========================================================================

The assembler currently used is the dlxasm Perl Script which was
downloaded from the webpage of the University of California, Santa
Cruz (http://www.cse.ucsc.edu/~elm/Software/Dlxos/index.shtml).  This
Perl script is also available in the ../gcc-dlx/dlxasm.  dlxasm
generates a binary object file .o from the assembly source.

As a linker is currently not available, the following alterations must
be made to the assembly source for a correct binary object file to be
generated with dlxasm:

- xgcc seems to include a jal ___main at the end of the Stack setup
  code. This is probably removed by the linker and in our case must be
  removed by hand.
- main must be at the top of the assembly file.
- at the end of function main, the instruction jr r31 must be replaced
  by j end\_prog
- at the end of assembly file the following line must be inserted
  end_prog: nop nop

The dlxasm assembler has not yet been fully tested for binary
compatibility with the implemented DLX processor (especially with
respect to control transfer instructions).


===========================================================================
DLX Binary Code in Testbench Instruction Memory
===========================================================================

In order to perform Verilog simulations using the binary code
generated by dlxasm, the binary code needs to converted to
ASCII form. It is possible to use a format file for the hexdump
Unix utility in order to generate big-endian, hexadecimal
representation of the object file suitable for Verilog simulation.

This output can then be used at the DLX testbench and the processor
reads this ASCII file whenever an access to the Instruction Memory is
performed. The hexdump format file is available at the
../gcc-dlx/dlxdump/str_dump file. As this file is used to initialise
the Instruction Memory, the testbench may be written so that it
terminates the simulation when the contents of the IR register contain
X's.


===========================================================================
Example of the Flow
===========================================================================

xgcc -S myprog.c	        # generate assembly file
vi myprog.s		        # edit assembly file
dlxasm myprog.s -o myprog.o     # generate object file
dlxdump < myprog.o > MemFile    # generate DLX Instuction Memory initfile


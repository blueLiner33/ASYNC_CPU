 line   address	contents
    1                      ; Linked by DLX-LD.
    2                      ; MemSize 12288
    3                      ; Data size: 60
    4                      ; Text size: 424
    5                      ; Stack size: 8192
    6  00000000          	.text 0x0000
    7  00000000          	.data 0x0800
    8                      ;;; Ethan L. Miller, 1999.  Released to the public domain
    9                      ;;;
   10                      ;;; Most of the traps are called in files from libtraps.
   11  00000800          	.text
   12  00000000          	.align 2
   13  00000000          	.proc ___init_LF0
   14  00000000  3c1d0000	lhi	r29,0x0000
   15  00000004  201d0ffc	addi	r29,r0,0x0FFC
   16  00000008  03a0f020	add	r30,r29,r0
   17  0000000c  0c00012c	jal	_main
   18  00000010  54000000	nop
   19  00000014          	.endproc ___init_LF0
   22  00000014          	.align 2
   23  00000014          	.proc _exit
   24  00000014          	.global _exit
   25  00000014          	_exit:
   26  00000014  44000300	trap	0x300
   27  00000018  4be00000	jr	r31
   28  0000001c  54000000	nop
   29  00000020          	.endproc _exit
   31                      ; for the benefit of gcc.
   33  00000020          	.align 2
   34  00000020          	.proc ___main
   35  00000020          	.global ___main
   36  00000020          	___main:
   37  00000020  4be00000	jr	r31
   38  00000024  54000000	nop
   39  00000028          	.endproc ___main
   41                      ; Trap Handler
   43  00000028          	.align 7
   44  00000080          	___trap_LF0:
   45  00000080  54000000	nop
   46  00000084  54000000	nop
   47  00000088  54000000	nop
   48  0000008c  1000fff0	beqz	r0,___trap_LF0
   49  00000090  54000000	nop
   50  00000094  54000000	nop
   51  00000098  54000000	nop
   52                      ; Compiled by GCC
   54  0000009c          	.align 2
   55  0000009c          	.proc _fib
   56  0000009c          	.global _fib
   57  0000009c          	_fib:
   58                      ;  Function 'fib'; 0 bytes of locals, 2 regs to save.
   59  0000009c  afbefffc	sw	-4(r29),r30; push fp
   60  000000a0  001df020	add	r30,r0,r29; fp = sp
   61  000000a4  afbffff8	sw	-8(r29),r31; push ret addr
   62  000000a8  2fbd0010	subui	r29,r29,16; alloc local storage
   63  000000ac  afa20000	sw	0(r29),r2
   64  000000b0  afa30004	sw	4(r29),r3
   65  000000b4  8fc30000	lw	r3,(r30)
   66  000000b8  60610000	seqi	r1,r3,0
   67  000000bc  14200018	bnez	r1,L3_LF1
   68  000000c0  54000000	nop; not filled.
   69  000000c4  60610001	seqi	r1,r3,1
   70  000000c8  10200024	beqz	r1,L5_LF1
   71  000000cc  54000000	nop; not filled.
   72  000000d0  08000010	j	L4_LF1
   73  000000d4  54000000	nop; not filled.
   74  000000d8          	L3_LF1:
   75  000000d8  2001fff8	addi	r1,r0,-8
   76  000000dc  08000040	j	L1_LF1
   77  000000e0  54000000	nop; not filled.
   78  000000e4          	L4_LF1:
   79  000000e4  20010005	addi	r1,r0,5
   80  000000e8  08000034	j	L1_LF1
   81  000000ec  54000000	nop; not filled.
   82  000000f0          	L5_LF1:
   83  000000f0  23bdfff8	addi	r29,r29,-8
   84  000000f4  2061ffff	addi	r1,r3,-1
   85  000000f8  afa10000	sw	(r29),r1
   86  000000fc  0fffff9c	jal	_fib
   87  00000100  54000000	nop; not filled.
   88  00000104  00011020	add	r2,r0,r1
   89  00000108  2061fffe	addi	r1,r3,-2
   90  0000010c  afa10000	sw	(r29),r1
   91  00000110  0fffff88	jal	_fib
   92  00000114  54000000	nop; not filled.
   93  00000118  00410820	add	r1,r2,r1
   94  0000011c  23bd0008	addi	r29,r29,8
   95  00000120          	L1_LF1:
   96  00000120  8fa20000	lw	r2,0(r29)
   97  00000124  8fa30004	lw	r3,4(r29)
   98  00000128  8fdffff8	lw	r31,-8(r30)
   99  0000012c  001ee820	add	r29,r0,r30
  100  00000130  8fdefffc	lw	r30,-4(r30)
  101  00000134  4be00000	jr	r31
  102  00000138  54000000	nop
  103  0000013c          	.endproc _fib
  104  0000013c          	.align 2
  105  0000013c          	.proc _main
  106  0000013c          	.global _main
  107  0000013c          	_main:
  108                      ;  Function 'main'; 0 bytes of locals, 0 regs to save.
  109  0000013c  afbefffc	sw	-4(r29),r30; push fp
  110  00000140  001df020	add	r30,r0,r29; fp = sp
  111  00000144  afbffff8	sw	-8(r29),r31; push ret addr
  112  00000148  2fbd0008	subui	r29,r29,8; alloc local storage
  113  0000014c  0ffffed0	jal	___main
  114  00000150  54000000	nop; not filled.
  115  00000154  20030000	addi	r3,r0,0
  116  00000158  3c040000	lhi	r4,((_results_int)>>16)&0xffff
  117  0000015c  24840814	addui	r4,r4,(_results_int)&0xffff
  118  00000160  3c020000	lhi	r2,((_results_char)>>16)&0xffff
  119  00000164  24420800	addui	r2,r2,(_results_char)&0xffff
  120  00000168          	L12_LF1:
  121  00000168  23bdfff8	addi	r29,r29,-8
  122  0000016c  afa30000	sw	(r29),r3
  123  00000170  0fffff28	jal	_fib
  124  00000174  54000000	nop; not filled.
  125  00000178  a4410000	sh	(r2),r1
  126  0000017c  84410000	lh	r1,(r2)
  127  00000180  ac810000	sw	(r4),r1
  128  00000184  23bd0008	addi	r29,r29,8
  129  00000188  20840004	addi	r4,r4,4
  130  0000018c  20420002	addi	r2,r2,2
  131  00000190  20630001	addi	r3,r3,1
  132  00000194  70610009	slei	r1,r3,9
  133  00000198  1420ffcc	bnez	r1,L12_LF1
  134  0000019c  54000000	nop; not filled.
  135  000001a0  0ffffe70	jal	_exit
  136  000001a4  54000000	nop
  137  000001a8          	.endproc _main
  138  000001a8          	.data
  139  00000800          	.align 1
  140  00000800          	.global _results_char
  141  00000800          	_results_char:
  142  00000800          	.space 20
  143  00000814          	.align 2
  144  00000814          	.global _results_int
  145  00000814          	_results_int:
  146  00000814          	.space 40
  147  0000083c          	.text
  148  000001a8          	.global _etext
  149  000001a8          	_etext:
  150  000001a8          	.align 3
  151  000001a8          	.data
  152  0000083c          	.global _edata
  153  0000083c          	_edata:
